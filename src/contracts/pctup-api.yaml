openapi: '3.0.3'
info:
  title: PCtup API
  version: '1.0'

paths:
  /signup:
    post:
      tags:
        - Login
      description: >-
        Cria conta.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        required: true

      responses:
        '201':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ObjectID'
                  name:
                    type: string
                  accessToken:
                    type: string
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Login
      description: >-
        Autentica a sessão.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParams'
        required: true

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/ObjectID'
                  name:
                    type: string
                  accessToken:
                    type: string
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags:
        - Usuário
      description: >-
        Busca usuário por id.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Usuário
      description: >-
        Atualiza usuário por id.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamsUpdateUser'
        required: true

      responses:
        '204':
          description: 'The resource was updated successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Usuário
      description: >-
        Remove usuário por id.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /setups:
    post:
      tags:
        - Setup
      description: >-
        Cria setup.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSetup'
        required: true

      responses:
        '201':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Setup
      description: >-
        Lista os setups ativos e públicos.

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SetupResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /setups/{setupId}:
    delete:
      tags:
        - Setup
      description: >-
        Remove um setup por id.

      parameters:
        - name: setupId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Setup
      description: >-
        Atualiza setup por id.

      parameters:
        - name: setupId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamsUpdateSetup'
        required: true

      responses:
        '204':
          description: 'The resource was updated successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /setups/users/{userId}:
    get:
      tags:
        - Setup
      description: >-
        Lista os setups de um usuário.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SetupResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /setups/{setupId}/images:
    post:
      tags:
        - Setup
      description: >-
        Adiciona uma imagem no setup. A imagem deve ser enviada no body usando a estrutura **multipart/form-data** onde o *name* deve ser **image** e o *value* o **arquivo** da imagem nos formatos png, jpg ou jpeg.

      parameters:
        - name: setupId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Image'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Setup
      description: >-
        Remove uma imagem do setup.

      parameters:
        - name: setupId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'
        - name: publicId
          in: query
          description: >-
            PublicId da imagem.
          required: true
          schema:
            type: string

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments:
    post:
      tags:
        - Comentário
      description: >-
        Cria comentário.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
        required: true

      responses:
        '201':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentId}:
    put:
      tags:
        - Comentário
      description: >-
        Atualiza um comentário.

      parameters:
        - name: commentId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                descricao:
                  type: string
              required:
                - 'descricao'
        required: true

      responses:
        '204':
          description: 'The resource was updated successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Comentário
      description: >-
        Remove um comentário.

      parameters:
        - name: commentId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/setups/{setupId}:
    get:
      tags:
        - Comentário
      description: >-
        Lista os comentários de um setup.

      parameters:
        - name: setupId
          in: path
          description: >-
            ObjectId do setup.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes:
    post:
      tags:
        - Curtida
      description: >-
        Adiciona uma curtida.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLike'
        required: true

      responses:
        '201':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes/{likeId}:
    delete:
      tags:
        - Curtida
      description: >-
        Remove uma curtida.

      parameters:
        - name: likeId
          in: path
          description: >-
            ObjectId do like.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes/users/{userId}:
    get:
      tags:
        - Curtida
      description: >-
        Retorna todas as curtidas de um usuário.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LikeResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /favorites:
    post:
      tags:
        - Favorito
      description: >-
        Adiciona um favorito.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFavorite'
        required: true

      responses:
        '201':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /favorites/{favoriteId}:
    delete:
      tags:
        - Favorito
      description: >-
        Remove um favorito.

      parameters:
        - name: favoriteId
          in: path
          description: >-
            ObjectId do favorito.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '204':
          description: 'The resource was deleted successfully.'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /favorites/users/{userId}:
    get:
      tags:
        - Favorito
      description: >-
        Retorna todas os favoritos de um usuário.

      parameters:
        - name: userId
          in: path
          description: >-
            ObjectId do usuário.
          required: true
          schema:
            $ref: '#/components/schemas/ObjectID'

      responses:
        '200':
          description: 'Successful request.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteResponse'

        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

servers:
  - url: '/api/v1'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Date:
      type: string
      format: date

    DateTime:
      type: string
      format: date-time

    ObjectID:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'

    Email:
      type: string
      format: email

    Error:
      properties:
        message:
          type: string
      required:
        - message

    CreateAccount:
      properties:
        name:
          type: string
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          minLength: 6
      required:
        - 'name'
        - 'email'
        - 'password'

    LoginParams:
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
      required:
        - 'email'
        - 'password'

    UserResponse:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
        nome:
          type: string
        email:
          $ref: '#/components/schemas/Email'
        dataNascimento:
          $ref: '#/components/schemas/DateTime'
        profissao:
          type: string
        estado:
          type: string
        cidade:
          type: string
        cargo:
          type: string
        imagem:
          $ref: '#/components/schemas/Image'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    ParamsUpdateUser:
      properties:
        nome:
          type: string
        dataNascimento:
          $ref: '#/components/schemas/Date'
        profissao:
          type: string
        estado:
          type: string
        cidade:
          type: string
        imagem:
          $ref: '#/components/schemas/Image'

    CreateSetup:
      properties:
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        titulo:
          type: string
        descricao:
          type: string
      required:
        - 'usuarioId'
        - 'descricao'

    SetupResponse:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        titulo:
          type: string
        descricao:
          type: string
        estaAtivo:
          type: boolean
        estaPublico:
          type: boolean
        imagens:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    Image:
      properties:
        publicId:
          type: string
        url:
          type: string

    ParamsUpdateSetup:
      properties:
        titulo:
          type: string
        descricao:
          type: string
        estaPublico:
          type: boolean

    CreateComment:
      properties:
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
        descricao:
          type: string
      required:
        - 'usuarioId'
        - 'setupId'
        - 'descricao'

    CommentResponse:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
        descricao:
          type: string
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'

    AddLike:
      properties:
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
      required:
        - 'usuarioId'
        - 'setupId'

    LikeResponse:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
        createdAt:
          $ref: '#/components/schemas/DateTime'

    AddFavorite:
      properties:
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
      required:
        - 'usuarioId'
        - 'setupId'

    FavoriteResponse:
      properties:
        _id:
          $ref: '#/components/schemas/ObjectID'
        usuarioId:
          $ref: '#/components/schemas/ObjectID'
        setupId:
          $ref: '#/components/schemas/ObjectID'
        createdAt:
          $ref: '#/components/schemas/DateTime'
        setup:
          $ref: '#/components/schemas/SetupResponse'
